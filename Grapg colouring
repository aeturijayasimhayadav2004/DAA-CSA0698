#include <stdio.h>
#include <stdbool.h>

#define V 4 // Number of vertices

// Function to check if the current color assignment is safe for vertex v
bool isSafe(int graph[V][V], int color[], int v, int c) {
    for (int i = 0; i < V; i++) {
        if (graph[v][i] && color[i] == c) {
            return false; // If adjacent vertex has the same color
        }
    }
    return true;
}

// Utility function to solve the coloring problem
bool graphColoringUtil(int graph[V][V], int m, int color[], int v) {
    if (v == V) {
        return true; // All vertices are assigned a color
    }

    for (int c = 1; c <= m; c++) {
        if (isSafe(graph, color, v, c)) {
            color[v] = c; // Assign color c to vertex v

            if (graphColoringUtil(graph, m, color, v + 1)) {
                return true; // Recursively assign colors to the next vertex
            }

            color[v] = 0; // Backtrack
        }
    }
    return false; // No solution found
}

// Function to solve the graph coloring problem
bool graphColoring(int graph[V][V], int m) {
    int color[V]; // Store the color assignments

    for (int i = 0; i < V; i++) {
        color[i] = 0; // Initialize all vertices as uncolored
    }

    if (graphColoringUtil(graph, m, color, 0) == false) {
        printf("Solution does not exist\n");
        return false;
    }

    printf("Solution exists: Following are the assigned colors:\n");
    for (int i = 0; i < V; i++) {
        printf("Vertex %d -> Color %d\n", i, color[i]);
    }
    return true;
}

int main() {
    int m; // Number of colors
    int graph[V][V] = {
        {0, 1, 1, 1},
        {1, 0, 0, 1},
        {1, 0, 0, 1},
        {1, 1, 1, 0}
    };

    printf("Enter the number of colors: ");
    scanf("%d", &m);

    graphColoring(graph, m);

    return 0;
}
