#include <stdio.h>
#include <stdbool.h>

#define N 4 // Change this value to solve for different sizes

void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf(" %d ", board[i][j]);
        }
        printf("\n");
    }
}

bool isSafe(int board[N][N], int row, int col) {
    for (int i = 0; i < col; i++)
        if (board[row][i]) // Check this row on the left side
            return false;

    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j]) // Check upper diagonal on the left side
            return false;

    for (int i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j]) // Check lower diagonal on the left side
            return false;

    return true; // Queen can be placed
}

bool solveNQUtil(int board[N][N], int col) {
    if (col >= N) // All queens are placed
        return true;

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1; // Place queen

            if (solveNQUtil(board, col + 1)) // Recur to place the rest
                return true;

            board[i][col] = 0; // Backtrack
        }
    }

    return false; // No place found for this queen
}

void solveNQ() {
    int board[N][N] = {0}; // Initialize the chessboard

    if (solveNQUtil(board, 0) == false) {
        printf("Solution does not exist\n");
        return;
    }

    printSolution(board);
}

int main() {
    solveNQ();
    return 0;
}
